#!/usr/bin/env python

from gradelib import *

r = Runner(save("jos.out"),
           stop_breakpoint("readline"))

@test(10)
def test_divzero():
    r.user_test("divzero")
    r.match('Incoming INT frame at 0xfffffeffffffff..',
            'INT frame at 0xf.......',
            ' INT 0: Divide-by-Zero Error Exception \(#DE\)',
            ' RIP 0x00000000008..... RFL 0x.{16}',
            ' CS  0x0023             DS  0x001b             SS  0x001b',
            '.00001000. free env 00001000',
            no=['1/0 is ........!'])

@test(10)
def test_softint():
    r.user_test("softint")
    r.match('Welcome to the JOS kernel monitor!',
            'Incoming INT frame at 0xfffffeffffffff..',
            'INT frame at 0xf.......',
            ' INT 13: General Protection \(#GP\)',
            ' RIP 0x00000000008..... RFL 0x.{16}',
            ' CS  0x0023             DS  0x001b             SS  0x001b',
            '.00001000. free env 00001000')

@test(10)
def test_badsegment():
    r.user_test("badsegment")
    r.match('Welcome to the JOS kernel monitor!',
            'Incoming INT frame at 0xfffffeffffffff..',
            'INT frame at 0xf.......',
            ' INT 13: General Protection \(#GP\)',
            ' ERR 0x0000000000000028',
            ' RIP 0x00000000008..... RFL 0x.{16}',
            ' CS  0x0023             DS  0x001b             SS  0x001b',
            '.00001000. free env 00001000')

end_part("A")

@test(5)
def test_faultread():
    r.user_test("faultread")
    r.match('.00001000. user fault va 0x0 ip 0x8.....',
            'Incoming INT frame at 0xfffffeffffffff..', 
            'INT frame at 0xf.......',
            ' INT 14: Page Fault \(#PF\)',
            ' ERR 0x0000000000000004.*',
            '.00001000. free env 0000100',
            no=['I read ........ from location 0!'])

@test(5)
def test_faultreadkernel():
    r.user_test("faultreadkernel")
    r.match('.00001000. user fault va 0xffff800000100000 ip 0x8.....',
            'Incoming INT frame at 0xfffffeffffffff..', 
            'INT frame at 0xf.......',
            ' INT 14: Page Fault \(#PF\)',
            ' ERR 0x0000000000000005.*',
            '.00001000. free env 00001000',
            no=['I read ........ from location 0xf0100000!'])

@test(5)
def test_faultwrite():
    r.user_test("faultwrite")
    r.match('.00001000. user fault va 0x0 ip 0x8.....',
            'Incoming INT frame at 0xfffffeffffffff..', 
            'INT frame at 0xf.......',
            ' INT 14: Page Fault \(#PF\)',
            ' ERR 0x0000000000000006.*',
            '.00001000. free env 0000100')

@test(5)
def test_faultwritekernel():
    r.user_test("faultwritekernel")
    r.match('.00001000. user fault va 0xffff800000100000 ip 0x8.....',
            'Incoming INT frame at 0xfffffeffffffff..', 
            'INT frame at 0xf.......',
            ' INT 14: Page Fault \(#PF\)',
            ' ERR 0x0000000000000007.*',
            '.00001000. free env 0000100')

@test(5)
def test_breakpoint():
    r.user_test("breakpoint")
    r.match('Welcome to the JOS kernel monitor!',
            'Incoming INT frame at 0xfffffeffffffff..', 
            'INT frame at 0xf.......',
            ' INT 3: Breakpoint \(#BP\)',  
            ' RIP 0x00000000008..... RFL 0x.{16}',
            ' CS  0x0023             DS  0x001b             SS  0x001b', 
            no=['.00001000. free env 00001000'])

@test(5)
def test_testbss():
    r.user_test("testbss")
    r.match('Making sure bss works right...',
            'Yes, good.  Now doing a wild write off the end...',
            '.00001000. user fault va 0xc..... ip 0x8.....',
            '.00001000. free env 0000100')

@test(5)
def test_hello():
    r.user_test("hello")
    r.match('.00000000. new env 00001000',
            'hello, world',
            'i am environment 00001000',
            '.00001000. exiting gracefully',
            '.00001000. free env 00001000',
            'Destroyed the only environment - nothing more to do!')

@test(5)
def test_buggyhello():
    r.user_test("buggyhello")
    r.match('.00001000. user_mem_check assertion failure for va 00000001',
            '.00001000. free env 00001000')

@test(5)
def test_buggyhello2():
    r.user_test("buggyhello2")
    r.match('.00001000. user_mem_check assertion failure for va 0....000',
            '.00001000. free env 00001000',
            no=['hello, world'])

@test(5)
def test_evilhello():
    r.user_test("evilhello")
    r.match('.00001000. user_mem_check assertion failure for va f0100...',
            '.00001000. free env 00001000')

end_part("B")

@test(5)
def test_vmatest():
    r.user_test("vmatest")
    r.match(' foo_ro = 0x1000,  foo_rw = 0x2000',
            '\*foo_ro = ., \*foo_rw = .',
            '\*foo_rw = cafebabe',
            '.00001000. user fault va 0x1000 ip 0x8.....',
            'Incoming INT frame at 0xfffffeffffffff..', 
            'INT frame at 0xf.......',
            ' INT 14: Page Fault \(#PF\)', 
            ' ERR 0x0000000000000007.*',
            '.00001000. free env 0000100')

@test(5)
def test_mapunmap():
    r.user_test("mapunmap")
    r.match('0\+5 == 4\+1',
            'Incoming INT frame at 0xfffffeffffffff..', 
            'INT frame at 0xf.......',
            ' INT 14: Page Fault \(#PF\)', 
            ' ERR 0x0000000000000006.*',
            '.00001000. free env 0000100')

@test(5)
def test_vmaspace():
    r.user_test("vmaspace")
    r.match('First alloc succeeded. Size:................ va:.*',
            'Second alloc failed. Size:................',
            'VMA space check succeeded')

end_part("C")

@test(5)
def test_cowfork():
    r.user_test("cowforktest")
    r.match('cowforktest completed.')

end_part("D")

run_tests()
